      @Suppress("DEPRECATION")
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
            window.insetsController?.hide(WindowInsets.Type.statusBars())
        } else {
            window.setFlags(
                WindowManager.LayoutParams.FLAG_FULLSCREEN,
                WindowManager.LayoutParams.FLAG_FULLSCREEN
            )
        }
        btn_register.setOnClickListener {
            var nev:EditText = findViewById(R.id.et_name)
            var fonok:EditText = findViewById(R.id.et_fonok)
            var email:EditText = findViewById(R.id.et_email)
            var jelszo:EditText = findViewById(R.id.et_password)
            var munkarend:EditText = findViewById(R.id.et_munkr)
            var eves:EditText = findViewById(R.id.et_eves)
            var hetimunka:EditText = findViewById(R.id.et_hetim)
            val cache = DiskBasedCache(cacheDir, 1024 * 1024) // 1MB cap

// Set up the network to use HttpURLConnection as the HTTP client.
            val network = BasicNetwork(HurlStack())

// Instantiate the RequestQueue with the cache and network. Start the queue.
            val requestQueue = RequestQueue(cache, network).apply {
                start()
            }
            val request =  StringRequest(
                Request.Method.GET , "http://192.168.0.38/Webremek/app/select.php",
                { response ->
                    print(response)
                    Toast.makeText(
                        applicationContext,
                        response,
                        Toast.LENGTH_SHORT
                    ).show()
                    val builder = GsonBuilder()
                    val gson = builder.create()
                    val data: List<model> = gson.fromJson(
                        response,
                        Array<model>::class.java
                    ).toList()
                    nev.setText(data[0].nev)
                    fonok.setText(data[0].fonok)
                    email.setText(data[0].email)
                    jelszo.setText(data[0].jelszo)
                    munkarend.setText(data[0].munkarend)
                    eves.setText(data[0].eves_szabadsag)
                    hetimunka.setText(data[0].heti_munkaido)
                },

                { error ->
                    Toast.makeText(
                        applicationContext,
                        error.toString(),
                        Toast.LENGTH_LONG
                    ).show()
                })

         //   val queue2 = Volley.newRequestQueue(applicationContext)
            requestQueue.add(request)


        }
		
		
		%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%MÁSIK%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		 btn_save.setOnClickListener{
            var fname: EditText= findViewById(R.id.eet_first_name)
            var lname: EditText= findViewById(R.id.eet_last_name)
            var email: EditText= findViewById(R.id.eet_email)
            var jelszo: EditText = findViewById(R.id.eet_password)
            var adoazon: EditText = findViewById(R.id.et_adoazon)
            var fonok: EditText = findViewById(R.id.et_boss)
            var munkarend: EditText = findViewById(R.id.et_munkarend)
            var szabad: EditText = findViewById(R.id.et_szabi)
            var hetim: EditText = findViewById(R.id.et_hetimunka)
            var nev:String = lname.text.toString() + " " + fname.text.toString()

            register_user(nev,email.text.toString(),jelszo.text.toString(),adoazon.text.toString(),fonok.text.toString(),munkarend.text.toString(),
                Date().toString(),szabad.text.toString(), hetim.text.toString())
        }
		    fun register_user(
        nev: String,
        email: String,
        jelszo: String,
        adoaz: String,
        fonok: String,
        munkarend: String,
        belepes: String,
        szabad: String,
        hetim:String
    ) {
        val request: StringRequest = object : StringRequest(
            Method.POST, "http://192.168.0.38/Webremek/app/insert.php",
            Response.Listener { response ->
                Toast.makeText(
                    applicationContext,
                    response,
                    Toast.LENGTH_SHORT
                ).show()
            },
            Response.ErrorListener { error ->
                Toast.makeText(
                    applicationContext,
                    error.toString(),
                    Toast.LENGTH_LONG
                ).show()
            }) {
            @Throws(AuthFailureError::class)
            override fun getParams(): Map<String, String>? {
                val map: MutableMap<String, String> = HashMap()
                map["nev"] = nev
                map["adoaz"] = adoaz
                map["fonok"] = fonok
                map["email"] = email
                map["jelszo"] = jelszo
                map["munkarend"] = munkarend
                map["belepes"] = belepes
                map["szabads"] = szabad
                map["hetimunk"] = hetim
                return map
            }
        }
        val queue = Volley.newRequestQueue(applicationContext)
        queue.add(request)
    }